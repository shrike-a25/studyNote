{"version":3,"sources":["webpack:///./src/components/Post.jsx","webpack:///./src/pages/index.jsx","webpack:///./src/components/TagsBlock.jsx"],"names":["Wrapper","Image","props","theme","shadows","post","default","hover","colors","background","Information","text","base","light","Date","Title","Post","path","cover","title","date","excerpt","tags","to","fluid","alt","list","Home","edges","data","allMarkdownRemark","site","map","node","key","id","frontmatter","childImageSharp","query","TagsContainer","TagsBlock","tag","upperTag","charAt","toUpperCase","slice"],"mappings":"8LAQMA,EAAO,2IAQPC,EAAK,oFAGK,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,KAAKC,UAHvC,kFAWO,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,KAAKE,QAXzC,oNA6BmB,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,OAAOC,aA7B/C,qLA8CLC,EAAW,4GAKJ,SAAAR,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKC,OAL7B,mBAQF,SAAAV,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKE,QAR/B,uIAsBXC,EAAI,iEAEC,SAAAZ,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKE,QAFlC,KAKJE,EAAK,2EAwBIC,IApBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,KAAtC,OACX,YAAC,IAAD,KACE,YAACtB,EAAD,KACE,YAACC,EAAD,KACE,YAAC,OAAD,CAAMsB,GAAE,QAAUN,EAAQE,MAAOA,GAC/B,YAAC,IAAD,CAAKK,MAAON,EAAOO,IAAKN,MAG5B,YAACT,EAAD,KACE,YAACI,EAAD,KAAOM,GACP,YAAC,OAAD,CAAMG,GAAE,QAAUN,GAChB,YAACF,EAAD,KAAQI,IAEV,YAAC,IAAD,CAAWO,KAAMJ,IAChBD,O,yLClGHrB,EAAO,uFAgCE2B,UA5BF,SAAC,GAAc,IAEHC,EAFE,EAAXC,KAEZC,kBAAqBF,MAEvB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAQT,MAAK,aAAeY,IAAKZ,QACjC,YAACnB,EAAD,KACG4B,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,YAAC,IAAD,CACEC,IAAKD,EAAKE,GACVhB,MAAOc,EAAKG,YAAYjB,MACxBC,KAAMa,EAAKG,YAAYhB,KACvBE,KAAMW,EAAKG,YAAYd,KACvBD,QAASY,EAAKZ,QACdJ,KAAMgB,EAAKG,YAAYnB,KACvBC,MAAOe,EAAKG,YAAYlB,MAAMmB,gBAAgBb,cAcnD,IAAMc,EAAK,c,sFCtCZC,EAAa,mQAcC,SAAArC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,KAAKC,UAdnC,6BAkCJkC,IAdG,SAAC,GAAD,IAAGd,EAAH,EAAGA,KAAH,OAChB,YAACa,EAAD,KACGb,GACCA,EAAKM,KAAI,SAAAS,GACP,IAAMC,EAAWD,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GACzD,OACE,YAAC,OAAD,CAAMX,IAAKO,EAAKlB,GAAE,SAAWkB,GAC3B,wBAAOC","file":"component---src-pages-index-jsx-1effca591b3832694e45.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport TagsBlock from './TagsBlock'\nimport Container from '../layouts/Container'\n\nconst Wrapper = styled.article`\n  margin: 0 3rem;\n  display: flex;\n  @media (max-width: 1000px) {\n    display: block;\n  }\n`\n\nconst Image = styled.div`\n  margin: auto;\n  position: relative;\n  box-shadow: ${props => props.theme.shadows.post.default};\n  /* transition: ${props => props.theme.transitions.boom.transition}; */\n  border-radius: 8px;\n  min-height: 300px;\n  img {\n    border-radius: 8px;\n  }\n  &:hover {\n    box-shadow: ${props => props.theme.shadows.post.hover};\n    transform: scale(1.04);\n  }\n  a {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    border-radius: 8px;\n    > div {\n      position: static !important;\n    }\n    > div > div {\n      position: static !important;\n    }\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 0 5px ${props => props.theme.colors.background};\n    }\n  }\n  flex-basis: 100%;\n  max-width: 100%;\n  width: 100%;\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n    margin-bottom: 1.5rem;\n  }\n  @media (max-width: 500px) {\n    min-height: 200px;\n  }\n`\n\nconst Information = styled.div`\n  padding: 1rem 1.5rem;\n  h1 {\n    font-size: 2rem;\n    display: inline-block;\n    color: ${props => props.theme.colors.text.base};\n    /* transition: all ${props => props.theme.transitions.default.duration}; */\n    &:hover {\n      color: ${props => props.theme.colors.text.light};\n    }\n  }\n  text-align: center;\n  flex-basis: 100%;\n  max-width: 100%;\n  width: 100%;\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n  }\n`\n\nconst Date = styled.div`\n  margin-top: 1rem;\n  color: ${props => props.theme.colors.text.light};\n`\n\nconst Title = styled.h1`\n  margin: 0;\n`\n\nconst Post = ({ path, cover, title, date, excerpt, tags }) => (\n  <Container>\n    <Wrapper>\n      <Image>\n        <Link to={`posts${path}`} title={title}>\n          <Img fluid={cover} alt={title} />\n        </Link>\n      </Image>\n      <Information>\n        <Date>{date}</Date>\n        <Link to={`posts${path}`}>\n          <Title>{title}</Title>\n        </Link>\n        <TagsBlock list={tags} />\n        {excerpt}\n      </Information>\n    </Wrapper>\n  </Container>\n)\n\nexport default Post\n\nPost.propTypes = {\n  cover: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  excerpt: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\nimport styled from '@emotion/styled'\nimport Layout from '../layouts'\nimport Post from '../components/Post'\nimport site from '../../config/site'\n\nconst Wrapper = styled.div`\n  padding: 2rem 2.5rem;\n`\n\nconst Home = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges }\n  } = data\n  return (\n    <Layout>\n      <Helmet title={`Home Page-${site.title}`} />\n      <Wrapper>\n        {edges.map(({ node }) => (\n          <Post\n            key={node.id}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n            excerpt={node.excerpt}\n            path={node.frontmatter.path}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n          />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nHome.propTypes = {\n  data: PropTypes.object\n}\n\nexport default Home\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 75)\n          frontmatter {\n            title\n            path\n            tags\n            date(formatString: \"YYYY年MM月DD日\")\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 1000\n                  quality: 90\n                  traceSVG: { color: \"#2B2B2F\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst TagsContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  a {\n    margin: 0 1rem 1rem 0;\n    color: white;\n    padding: 0.3rem 0.6rem;\n    background: #666666;\n    border-radius: 10px;\n    &:hover {\n      background: black;\n      box-shadow: ${props => props.theme.shadows.post.default};\n      transform: scale(1.02);\n    }\n  }\n`\n\nconst TagsBlock = ({ list }) => (\n  <TagsContainer>\n    {list &&\n      list.map(tag => {\n        const upperTag = tag.charAt(0).toUpperCase() + tag.slice(1)\n        return (\n          <Link key={tag} to={`/tags/${tag}`}>\n            <span>{upperTag}</span>\n          </Link>\n        )\n      })}\n  </TagsContainer>\n)\n\nexport default TagsBlock\n\nTagsBlock.propTypes = {\n  list: PropTypes.array\n}\n"],"sourceRoot":""}