{"version":3,"sources":["webpack:///./src/components/Post.jsx","webpack:///./src/templates/tag.jsx"],"names":["Wrapper","Image","props","theme","shadows","post","default","hover","colors","background","Information","text","base","light","Date","Title","Post","path","cover","title","date","excerpt","tags","to","fluid","alt","list","StyledLink","Link","Tag","pageContext","posts","tagName","upperTag","charAt","toUpperCase","slice","config","siteTitle","map","index","key","frontmatter","childImageSharp"],"mappings":"8LAQMA,EAAO,4IAQPC,EAAK,qFAGK,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,KAAKC,UAHvC,kFAWO,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,KAAKE,QAXzC,oNA6BmB,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,OAAOC,aA7B/C,qLA8CLC,EAAW,6GAKJ,SAAAR,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKC,OAL7B,mBAQF,SAAAV,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKE,QAR/B,uIAsBXC,EAAI,kEAEC,SAAAZ,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKE,QAFlC,KAKJE,EAAK,4EAwBIC,IApBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,KAAtC,OACX,YAAC,IAAD,KACE,YAACtB,EAAD,KACE,YAACC,EAAD,KACE,YAAC,OAAD,CAAMsB,GAAE,QAAUN,EAAQE,MAAOA,GAC/B,YAAC,IAAD,CAAKK,MAAON,EAAOO,IAAKN,MAG5B,YAACT,EAAD,KACE,YAACI,EAAD,KAAOM,GACP,YAAC,OAAD,CAAMG,GAAE,QAAUN,GAChB,YAACF,EAAD,KAAQI,IAEV,YAAC,IAAD,CAAWO,KAAMJ,IAChBD,O,uLChGHM,EAAa,YAAOC,OAAP,qBAAH,UACL,SAAA1B,GAAK,OAAIA,EAAMC,MAAMK,OAAOG,KAAKC,OAD5B,kFAME,SAAAV,GAAK,OAAIA,EAAMC,MAAMK,OAAOC,aAN9B,MAUVC,EAAW,8HAmCFmB,UA3BH,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACLC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,QACTC,EAAWD,EAAQE,OAAO,GAAGC,cAAgBH,EAAQI,MAAM,GACjE,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAQjB,MAAUa,EAAL,MAAkBK,IAAOC,YACtC,YAAC,IAAD,CAAQnB,MAAOc,GACb,YAACN,EAAD,CAAYJ,GAAG,YAAf,aAEF,YAAC,IAAD,KACE,YAACb,EAAD,KACGqB,EAAMQ,KAAI,SAAClC,EAAMmC,GAAP,OACT,YAAC,IAAD,CACEC,IAAKD,EACLrB,MAAOd,EAAKqC,YAAYvB,MACxBC,KAAMf,EAAKqC,YAAYtB,KACvBE,KAAMjB,EAAKqC,YAAYpB,KACvBL,KAAMZ,EAAKqC,YAAYzB,KACvBC,MAAOb,EAAKqC,YAAYxB,MAAMyB,gBAAgBnB","file":"component---src-templates-tag-jsx-ff3cbd8b5e74ec7c3d84.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport TagsBlock from './TagsBlock';\nimport Container from '../layouts/Container';\n\nconst Wrapper = styled.article`\n  margin: 0 3rem;\n  display: flex;\n  @media (max-width: 1000px) {\n    display: block;\n  }\n`;\n\nconst Image = styled.div`\n  margin: auto;\n  position: relative;\n  box-shadow: ${props => props.theme.shadows.post.default};\n  /* transition: ${props => props.theme.transitions.boom.transition}; */\n  border-radius: 8px;\n  min-height: 300px;\n  img {\n    border-radius: 8px;\n  }\n  &:hover {\n    box-shadow: ${props => props.theme.shadows.post.hover};\n    transform: scale(1.04);\n  }\n  a {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    border-radius: 8px;\n    > div {\n      position: static !important;\n    }\n    > div > div {\n      position: static !important;\n    }\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 0 5px ${props => props.theme.colors.background};\n    }\n  }\n  flex-basis: 100%;\n  max-width: 100%;\n  width: 100%;\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n    margin-bottom: 1.5rem;\n  }\n  @media (max-width: 500px) {\n    min-height: 200px;\n  }\n`;\n\nconst Information = styled.div`\n  padding: 1rem 1.5rem;\n  h1 {\n    font-size: 2rem;\n    display: inline-block;\n    color: ${props => props.theme.colors.text.base};\n    /* transition: all ${props => props.theme.transitions.default.duration}; */\n    &:hover {\n      color: ${props => props.theme.colors.text.light};\n    }\n  }\n  text-align: center;\n  flex-basis: 100%;\n  max-width: 100%;\n  width: 100%;\n  @media (max-width: 800px) {\n    flex-basis: 100%;\n    max-width: 100%;\n    width: 100%;\n  }\n`;\n\nconst Date = styled.div`\n  margin-top: 1rem;\n  color: ${props => props.theme.colors.text.light};\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n`;\n\nconst Post = ({ path, cover, title, date, excerpt, tags }) => (\n  <Container>\n    <Wrapper>\n      <Image>\n        <Link to={`posts${path}`} title={title}>\n          <Img fluid={cover} alt={title} />\n        </Link>\n      </Image>\n      <Information>\n        <Date>{date}</Date>\n        <Link to={`posts${path}`}>\n          <Title>{title}</Title>\n        </Link>\n        <TagsBlock list={tags} />\n        {excerpt}\n      </Information>\n    </Wrapper>\n  </Container>\n);\n\nexport default Post;\n\nPost.propTypes = {\n  cover: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  excerpt: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n};\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport Layout from '../layouts'\nimport Container from '../layouts/Container'\nimport Header from '../layouts/Header'\nimport config from '../../config/site'\nimport Post from '../components/Post'\n\nconst StyledLink = styled(Link)`\n  color: ${props => props.theme.colors.text.base};\n  padding: 5px 10px;\n  border: solid 1px #fff;\n  border-radius: 20px;\n  &:hover {\n    background: ${props => props.theme.colors.background};\n  }\n`\n\nconst Information = styled.div`\n  text-align: center;\n  h1 {\n    font-size: 2rem;\n    margin-bottom: 1.25rem;\n  }\n`\n\nconst Tag = ({ pageContext }) => {\n  const { posts, tagName } = pageContext\n  const upperTag = tagName.charAt(0).toUpperCase() + tagName.slice(1)\n  return (\n    <Layout>\n      <Helmet title={`${tagName} | ${config.siteTitle}`} />\n      <Header title={upperTag}>\n        <StyledLink to='/taglist'>All Tags</StyledLink>\n      </Header>\n      <Container>\n        <Information>\n          {posts.map((post, index) => (\n            <Post\n              key={index}\n              title={post.frontmatter.title}\n              date={post.frontmatter.date}\n              tags={post.frontmatter.tags}\n              path={post.frontmatter.path}\n              cover={post.frontmatter.cover.childImageSharp.fluid}\n            />\n          ))}\n        </Information>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Tag\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    posts: PropTypes.array,\n    tagName: PropTypes.string\n  })\n}\n"],"sourceRoot":""}