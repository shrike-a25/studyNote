<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[shrike's Note RSS Feed]]></title><description><![CDATA[shrike's Note]]></description><link>https://shrike-a25.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 19 Dec 2019 13:27:25 GMT</lastBuildDate><item><title><![CDATA[C#テスト環境]]></title><description><![CDATA[C#テスト環境 Xunit ユニットテスト用フレームワーク FluentAssertions ユニットテスト用拡張メソッド Moq mocking インタフェースの処理が呼ばれた時の引数と戻り値を指定できる。 指定した引数がインタフェース Coverlet.collector…]]></description><link>https://shrike-a25.netlify.com/posts//2019-12-14</link><guid isPermaLink="false">https://shrike-a25.netlify.com/posts//2019-12-14</guid><pubDate>Sat, 14 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;C#テスト環境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Xunit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニットテスト用フレームワーク&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FluentAssertions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニットテスト用拡張メソッド&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moq&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mocking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インタフェースの処理が呼ばれた時の引数と戻り値を指定できる。&lt;/p&gt;
&lt;p&gt;指定した引数がインタフェース&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coverlet.collector&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カバレッジ計算・出力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Xunit 使い方&lt;/h2&gt;
&lt;p&gt;Fact 属性でテスト対象にする。&lt;/p&gt;
&lt;p&gt;Fact 属性に引数 DisplayName を渡すとテストエクスプローラに表示される名称が変わる。&lt;/p&gt;
&lt;p&gt;渡さない場合はメソッド名となる。&lt;/p&gt;
&lt;p&gt;例[Fact(DisplayName = &quot;aaaa&quot;)]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xunit.net&quot;&gt;Xunit 公式&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Xunit で Console 出力を表示&lt;/h3&gt;
&lt;p&gt;Console.SetOut を使い ITestOutputHelper の WriteLine を実行する。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; converter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;converter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Converter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextWriter&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ITestOutputHelper&lt;/span&gt; _output&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ITestOutputHelper&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Encoding&lt;/span&gt; Encoding
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Encoding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UTF8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; format&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Moq の使い方&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;インターフェイス&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;対象メソッド&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;返却値&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/moq/moq4/wiki/Quickstart&quot;&gt;Moq Quickstart&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[vscode お勧め拡張]]></title><description><![CDATA[vscode お勧め拡張 Live Server 簡易な開発用 web サーバ。 Debugger for Chrome Chrome での debug 用。 Prettier - Code formatter コード整形。 ESLint コード整形。 Bracket Pair…]]></description><link>https://shrike-a25.netlify.com/posts//2019-12-13</link><guid isPermaLink="false">https://shrike-a25.netlify.com/posts//2019-12-13</guid><pubDate>Fri, 13 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;vscode お勧め拡張&lt;/h1&gt;
&lt;h2&gt;Live Server&lt;/h2&gt;
&lt;p&gt;簡易な開発用 web サーバ。&lt;/p&gt;
&lt;h2&gt;Debugger for Chrome&lt;/h2&gt;
&lt;p&gt;Chrome での debug 用。&lt;/p&gt;
&lt;h2&gt;Prettier - Code formatter&lt;/h2&gt;
&lt;p&gt;コード整形。&lt;/p&gt;
&lt;h2&gt;ESLint&lt;/h2&gt;
&lt;p&gt;コード整形。&lt;/p&gt;
&lt;h2&gt;Bracket Pair Colorizer 2&lt;/h2&gt;
&lt;p&gt;対応する括弧が色で分かるようになる。&lt;/p&gt;
&lt;h2&gt;Visual Studio IntelliCode&lt;/h2&gt;
&lt;p&gt;コーディング支援。&lt;/p&gt;
&lt;h2&gt;Document This&lt;/h2&gt;
&lt;p&gt;対象ファンクション等にキャレットを置いて ctrl+ald+d で JavaScript と typescript のコメントを追加できる。&lt;/p&gt;
&lt;h2&gt;Jest Test Explorer&lt;/h2&gt;
&lt;p&gt;unitTest ツール Jest 用のテストエクスプローラ。&lt;/p&gt;
&lt;h2&gt;bookmarks&lt;/h2&gt;
&lt;p&gt;ブックマーク機能を追加する。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[C#のパフォーマンス最適化技法]]></title><description><![CDATA[C#のパフォーマンス最適化技法 速度測定 BenchmarkDotNet ライブラリを使う Stopwatch より正確なベンチマークパッケージ。 使い方は公式ページ参照。 benchmarkdotnet 公式 Stopwatch クラスを使う BenchmarkDotNet…]]></description><link>https://shrike-a25.netlify.com/posts//2019-12-06</link><guid isPermaLink="false">https://shrike-a25.netlify.com/posts//2019-12-06</guid><pubDate>Fri, 06 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;C#のパフォーマンス最適化技法&lt;/h1&gt;
&lt;h2&gt;速度測定&lt;/h2&gt;
&lt;h3&gt;BenchmarkDotNet ライブラリを使う&lt;/h3&gt;
&lt;p&gt;Stopwatch より正確なベンチマークパッケージ。&lt;/p&gt;
&lt;p&gt;使い方は公式ページ参照。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://benchmarkdotnet.org/&quot;&gt;benchmarkdotnet 公式&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Stopwatch クラスを使う&lt;/h3&gt;
&lt;p&gt;BenchmarkDotNet 程正確ではないが、簡単に使える。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/dotnet/api/system.diagnostics.stopwatch&quot;&gt;Microsoft Docs Stopwatch クラス&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下のような Utilty があれば楽。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&gt;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// 処理時間計測Utilty&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StopwatchUtilty&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; Dictionary&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Stopwatch&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _dic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// 計測開始&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;param name=&quot;processName&quot;&gt;&amp;lt;/param&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; processName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;processName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            _dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;processName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// 再計測開始&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;param name=&quot;processName&quot;&gt;&amp;lt;/param&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; processName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;processName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// 計測停止&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;param name=&quot;processName&quot;&gt;&amp;lt;/param&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; processName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;processName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// 計測結果&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;param name=&quot;processName&quot;&gt;&amp;lt;/param&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; processName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// 結果表示&lt;/span&gt;
            Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot; {processName},{_dic[processName].Elapsed.ToString()}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;最適化&lt;/h2&gt;
&lt;p&gt;Boxing させない。&lt;/p&gt;
&lt;p&gt;インライン化する。&lt;/p&gt;
&lt;p&gt;無駄な処理をさせない。&lt;/p&gt;
&lt;p&gt;メモリ割り当て、GC を減らす。&lt;/p&gt;
&lt;h3&gt;Boxing&lt;/h3&gt;
&lt;p&gt;簡単に説明すると、
まず、メモリを確保する際にヒープとスタックがあり。
そしてスタックと比べるとヒープの方が重たい。
object 型で値のやり取りをする場合に box 化,unbox 化が発生する。
box 化するとヒープへ割り当てられる。(Heap Allocation)
なので、box,unbox はパフォーマンス的によろしくない。&lt;/p&gt;
&lt;h4&gt;box 化させないためには&lt;/h4&gt;
&lt;p&gt;object 型を使用しない。
メソッド呼び出し時にジェネリックがあればそちらを使う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/types/boxing-and-unboxing&quot;&gt;Microsoft Docs ボックス化とボックス化解除&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clr Heap Allocation Analyzer 拡張を使うと警告が表示される。&lt;/p&gt;
&lt;h4&gt;IL を確認する&lt;/h4&gt;
&lt;p&gt;ILSpy&lt;/p&gt;
&lt;p&gt;DnSpy&lt;/p&gt;
&lt;p&gt;ildasm&lt;/p&gt;
&lt;h3&gt;メモリ最適化&lt;/h3&gt;
&lt;p&gt;VisualStudio のデバッグ-ウィンドウ-診断ツールの表示から診断ツール表示。&lt;/p&gt;
&lt;p&gt;適宜スナップショットをとって直前のスナップショットと比較する。&lt;/p&gt;
&lt;p&gt;参照の削除。(参照されていると GC で解放されないため)&lt;/p&gt;
&lt;p&gt;イベントの削除。(参照が残るので)&lt;/p&gt;
&lt;p&gt;Dispose の徹底。(using を使う)&lt;/p&gt;
&lt;p&gt;Lambda での変数のキャプチャに気をつける。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[はじめに]]></title><description><![CDATA[はじめに このサイトは IT 技術について個人的に学んだことを記述するための
備忘録的な目的で使用します。]]></description><link>https://shrike-a25.netlify.com/posts//2019-11-24</link><guid isPermaLink="false">https://shrike-a25.netlify.com/posts//2019-11-24</guid><pubDate>Sun, 24 Nov 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;このサイトは IT 技術について個人的に学んだことを記述するための
備忘録的な目的で使用します。&lt;/p&gt;</content:encoded></item></channel></rss>